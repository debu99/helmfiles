apiVersion: external-secrets.io/v1alpha1
kind: ExternalSecret
metadata:
  name: mysql-secret
  namespace: db
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: ClusterSecretStore
    name: cluster-secret-store #The cluster secret store name
  target:
    name: mysql-secret # Secret name in k8s
  data:
  {{- if eq .Values.provider "aws" }}
  - secretKey: mysql-root-password # which key it's going to be stored
    remoteRef:
      key: mysql-secret # secret-name in remote
      property: root_password
  - secretKey: mysql-password # which key it's going to be stored
    remoteRef:
      key: mysql-secret # secret-name in remote
      property: app_password
  - secretKey: app-username # which key it's going to be stored
    remoteRef:
      key: mysql-secret # secret-name in remote
      property: app_username
  {{- else if eq .Values.provider "vault" }}
  - secretKey: mysql-root-password # which key it's going to be stored
    remoteRef:
      key: {{ .Values.vault.mysql_path }} # secret-name in remote
      property: root_password
  - secretKey: mysql-password # which key it's going to be stored
    remoteRef:
      key: {{ .Values.vault.mysql_path }} # secret-name in remote
      property: app_password
  - secretKey: app-username # which key it's going to be stored
    remoteRef:
      key: {{ .Values.vault.mysql_path }} # secret-name in remote
      property: app_username
  {{- end }}