apiVersion: external-secrets.io/v1alpha1
kind: ExternalSecret
metadata:
  name: grafana-secret
  namespace: monitoring
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: ClusterSecretStore
    name: cluster-secret-store #The cluster secret store name
  target:
    name: grafana-secret # Secret name in k8s
  data:
  {{- if eq .Values.provider "aws" }}
  - secretKey: admin_password # which key it's going to be stored
    remoteRef:
      key: grafana-secret # secret-name in remote
      property: admin_password
  - secretKey: admin_username # which key it's going to be stored
    remoteRef:
      key: grafana-secret # secret-name in remote
      property: admin_username
  - secretKey: db_username # which key it's going to be stored
    remoteRef:
      key: mysql-secret # secret-name in remote
      property: app_username
  - secretKey: db_password # which key it's going to be stored
    remoteRef:
      key: mysql-secret # secret-name in remote
      property: app_password
  {{- else if eq .Values.provider "vault" }}
  - secretKey: admin_password # which key it's going to be stored
    remoteRef:
      key: {{ .Values.vault.grafana_path }} # secret-name in remote
      property: admin_password
  - secretKey: admin_username # which key it's going to be stored
    remoteRef:
      key: {{ .Values.vault.grafana_path }} # secret-name in remote
      property: admin_username
  - secretKey: db_username # which key it's going to be stored
    remoteRef:
      key: {{ .Values.vault.mysql_path }} # secret-name in remote
      property: app_username
  - secretKey: db_password # which key it's going to be stored
    remoteRef:
      key: {{ .Values.vault.mysql_path }} # secret-name in remote
      property: app_password
  {{- end }}